/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Sessions {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create multiple reference profile uploads for a given session.
     *
     * @remarks
     * Create multiple reference profile uploads for a given session.
     */
    async batchCreateReferenceProfileUpload(
        req: operations.BatchCreateReferenceProfileUploadRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.BatchCreateReferenceProfileUploadResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.BatchCreateReferenceProfileUploadRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/sessions/{session_id}/references", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "batchLogReferenceRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.BatchCreateReferenceProfileUploadResponse =
            new operations.BatchCreateReferenceProfileUploadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.batchLogSessionReferenceResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.BatchLogSessionReferenceResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Claim a guest session, copying its model data into another org and expiring the session.
     *
     * @remarks
     * Claim a guest session, copying its model data into another org and expiring the session.
     */
    async claimGuestSession(
        req: operations.ClaimGuestSessionRequest,
        security: operations.ClaimGuestSessionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ClaimGuestSessionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ClaimGuestSessionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/sessions/{session_id}/claim", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ClaimGuestSessionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ClaimGuestSessionResponse = new operations.ClaimGuestSessionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Create an upload for a given session.
     *
     * @remarks
     * Create an upload for a given session.
     */
    async createDatasetProfileUpload(
        req: operations.CreateDatasetProfileUploadRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateDatasetProfileUploadResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateDatasetProfileUploadRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/sessions/{session_id}/upload", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "logAsyncRequest", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateDatasetProfileUploadResponse =
            new operations.CreateDatasetProfileUploadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.asyncLogResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.AsyncLogResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create a reference profile upload for a given session.
     *
     * @remarks
     * Create a reference profile upload for a given session.
     */
    async createReferenceProfileUpload(
        req: operations.CreateReferenceProfileUploadRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateReferenceProfileUploadResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateReferenceProfileUploadRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/sessions/{session_id}/reference", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "logReferenceRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateReferenceProfileUploadResponse =
            new operations.CreateReferenceProfileUploadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.logSessionReferenceResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.LogSessionReferenceResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create a new session that can be used to upload dataset profiles from whylogs for display in whylabs.
     *
     * @remarks
     * Create a new session that can be used to upload dataset profiles from whylogs for display in whylabs.
     */
    async createSession(
        req: shared.CreateSessionRequest,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateSessionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.CreateSessionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/sessions";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateSessionResponse = new operations.CreateSessionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createSessionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.CreateSessionResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get information about a session.
     *
     * @remarks
     * Get information about a session.
     */
    async getSession(
        req: operations.GetSessionRequest,
        security: operations.GetSessionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSessionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetSessionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/sessions/{session_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetSessionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSessionResponse = new operations.GetSessionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getSessionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetSessionResponse
                    );
                }
                break;
        }

        return res;
    }
}
