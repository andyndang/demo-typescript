/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../shared";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class UpdateOrgSecurity extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "security, scheme=true;type=apiKey;subtype=header;name=X-API-Key" })
    apiKeyAuth: string;
}

export class UpdateOrgRequestBody extends SpeakeasyBase {
    /**
     * The unique ID of an organization. If an organization with this ID does not exist, this method will throw an exception.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "org_id" })
    orgId?: string;
}

export class UpdateOrgRequest extends SpeakeasyBase {
    @SpeakeasyMetadata({ data: "request, media_type=application/json" })
    requestBody: UpdateOrgRequestBody;

    /**
     * Domain associated with this organization
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=domain" })
    domain?: string;

    /**
     * Email domains associated with this organization, as a comma separated list
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=email_domains" })
    emailDomains?: string;

    /**
     * The name of the organization
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=name" })
    name: string;

    /**
     * Email address that should be used for notifications for this organization
     */
    @SpeakeasyMetadata({
        data: "queryParam, style=form;explode=true;name=notification_email_address",
    })
    notificationEmailAddress?: string;

    /**
     * Url that users of this organization will be redirected to in some cases (such as via Siren notifications). NOTE: should NOT be followed by a trailing slash!
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=observatory_url" })
    observatoryUrl?: string;

    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=pager_duty_key" })
    pagerDutyKey?: string;

    /**
     * Slack Webhook that should be used for notifications for this organization
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=slack_webhook" })
    slackWebhook?: string;

    /**
     * Organization's subscription tier. Should be PAID for real customers
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=subscription_tier" })
    subscriptionTier?: shared.SubscriptionTier;
}

export class UpdateOrgResponse extends SpeakeasyBase {
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * A summary of the organization object if succeeds
     */
    @SpeakeasyMetadata()
    organizationSummary?: shared.OrganizationSummary;

    @SpeakeasyMetadata()
    statusCode: number;

    @SpeakeasyMetadata()
    rawResponse?: AxiosResponse;
}
