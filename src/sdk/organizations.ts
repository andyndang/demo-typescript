/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Organizations {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create an organization
     *
     * @remarks
     * Create an organization
     */
    async createOrganization(
        req: operations.CreateOrganizationRequest,
        security: operations.CreateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateOrganizationResponse =
            new operations.CreateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete an org
     *
     * @remarks
     * Delete an org
     */
    async deleteOrganization(
        req: operations.DeleteOrganizationRequest,
        security: operations.DeleteOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteOrganizationResponse =
            new operations.DeleteOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Get marketplace metadata for an org if any exists.
     *
     * @remarks
     * Get marketplace metadata for an org if any exists.
     */
    async getAWSMarketplaceMetadata(
        req: operations.GetAWSMarketplaceMetadataRequest,
        security: operations.GetAWSMarketplaceMetadataSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetAWSMarketplaceMetadataResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAWSMarketplaceMetadataRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/marketplace-metadata/",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetAWSMarketplaceMetadataSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetAWSMarketplaceMetadataResponse =
            new operations.GetAWSMarketplaceMetadataResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMarketplaceMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMarketplaceMetadataResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the metadata about an organization.
     *
     * @remarks
     * Returns various metadata about an organization
     */
    async getOrganization(
        req: operations.GetOrganizationRequest,
        security: operations.GetOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetOrganizationResponse = new operations.GetOrganizationResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get a list of all of the organization ids.
     *
     * @remarks
     * Get a list of all of the organization ids.
     */
    async listOrganizations(
        security: operations.ListOrganizationsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListOrganizationsResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListOrganizationsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListOrganizationsResponse = new operations.ListOrganizationsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listOrganizationsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ListOrganizationsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update some fields of an organization to non-null values
     *
     * @remarks
     * Update some fields of an organization to non-null values, leaving all other existing values the same
     *
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async partiallyUpdateOrg(
        req: operations.PartiallyUpdateOrgRequest,
        security: operations.PartiallyUpdateOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PartiallyUpdateOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PartiallyUpdateOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations/partial/";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PartiallyUpdateOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PartiallyUpdateOrgResponse =
            new operations.PartiallyUpdateOrgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update some fields of an organization to non-null values
     *
     * @remarks
     * Update some fields of an organization to non-null values, leaving all other existing values the same
     */
    async partiallyUpdateOrganization(
        req: operations.PartiallyUpdateOrganizationRequest,
        security: operations.PartiallyUpdateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PartiallyUpdateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PartiallyUpdateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/partial/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PartiallyUpdateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PartiallyUpdateOrganizationResponse =
            new operations.PartiallyUpdateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update an existing organization
     *
     * @remarks
     * Update all fields of an existing organization
     *
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async updateOrg(
        req: operations.UpdateOrgRequest,
        security: operations.UpdateOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateOrgResponse = new operations.UpdateOrgResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update an existing organization
     *
     * @remarks
     * Update all fields of an existing organization
     */
    async updateOrganization(
        req: operations.UpdateOrganizationRequest,
        security: operations.UpdateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateOrganizationResponse =
            new operations.UpdateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }
}
