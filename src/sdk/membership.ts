/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Membership {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     *
     * @remarks
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     */
    async createMembership(
        req: shared.AddMembershipRequest,
        security: operations.CreateMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.AddMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMembershipResponse = new operations.CreateMembershipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     *
     * @remarks
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     */
    async createOrganizationMembership(
        req: operations.CreateOrganizationMembershipRequest,
        security: operations.CreateOrganizationMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateOrganizationMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateOrganizationMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/membership",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateOrganizationMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateOrganizationMembershipResponse =
            new operations.CreateOrganizationMembershipResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the default membership for a user.
     *
     * @remarks
     * Get the default membership for a user.
     */
    async getDefaultMembershipForEmail(
        req: operations.GetDefaultMembershipForEmailRequest,
        security: operations.GetDefaultMembershipForEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetDefaultMembershipForEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetDefaultMembershipForEmailRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/default";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetDefaultMembershipForEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetDefaultMembershipForEmailResponse =
            new operations.GetDefaultMembershipForEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getDefaultMembershipResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetDefaultMembershipResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for a user.
     *
     * @remarks
     * Get memberships for a user.
     */
    async getMemberships(
        req: operations.GetMembershipsRequest,
        security: operations.GetMembershipsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/membership/user/{user_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsResponse = new operations.GetMembershipsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for a user given that user's email address.
     *
     * @remarks
     * Get memberships for a user given that user's email address.
     */
    async getMembershipsByEmail(
        req: operations.GetMembershipsByEmailRequest,
        security: operations.GetMembershipsByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsByEmailRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/user";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsByEmailResponse =
            new operations.GetMembershipsByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for an org.
     *
     * @remarks
     * Get memberships for an org.
     */
    async getMembershipsByOrg(
        req: operations.GetMembershipsByOrgRequest,
        security: operations.GetMembershipsByOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsByOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsByOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/membership/org/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsByOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsByOrgResponse =
            new operations.GetMembershipsByOrgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List organization memberships
     *
     * @remarks
     * list memberships for an organization
     */
    async listOrganizationMemberships(
        req: operations.ListOrganizationMembershipsRequest,
        security: operations.ListOrganizationMembershipsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListOrganizationMembershipsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListOrganizationMembershipsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/membership",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListOrganizationMembershipsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListOrganizationMembershipsResponse =
            new operations.ListOrganizationMembershipsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listOrganizationMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ListOrganizationMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Removes membership in a given org from a user, using the user's email address.
     *
     * @remarks
     * Removes membership in a given org from a user, using the user's email address.
     */
    async removeMembershipByEmail(
        req: shared.RemoveMembershipRequest,
        security: operations.RemoveMembershipByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RemoveMembershipByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RemoveMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RemoveMembershipByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RemoveMembershipByEmailResponse =
            new operations.RemoveMembershipByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Removes membership in a given org from a user, using the user's email address.
     *
     * @remarks
     * Removes membership in a given org from a user, using the user's email address.
     */
    async removeOrganizationMembership(
        req: operations.RemoveOrganizationMembershipRequest,
        security: operations.RemoveOrganizationMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RemoveOrganizationMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.RemoveOrganizationMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/membership",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RemoveOrganizationMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RemoveOrganizationMembershipResponse =
            new operations.RemoveOrganizationMembershipResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Sets the organization that should be used when logging a user in
     *
     * @remarks
     * Sets the organization that should be used when logging a user in
     */
    async setDefaultMembership(
        req: shared.SetDefaultMembershipRequest,
        security: operations.SetDefaultMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.SetDefaultMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.SetDefaultMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/default";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.SetDefaultMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SetDefaultMembershipResponse =
            new operations.SetDefaultMembershipResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Updates the role in an membership
     *
     * @remarks
     * Updates the role in an membership, given the organization and the user's email address.
     */
    async updateMembershipByEmail(
        req: shared.UpdateMembershipRequest,
        security: operations.UpdateMembershipByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateMembershipByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.UpdateMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateMembershipByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateMembershipByEmailResponse =
            new operations.UpdateMembershipByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Updates the role in an membership
     *
     * @remarks
     * Updates the role in an membership, given the organization and the user's email address.
     */
    async updateOrganizationMembership(
        req: operations.UpdateOrganizationMembershipRequest,
        security: operations.UpdateOrganizationMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateOrganizationMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateOrganizationMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/membership",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateOrganizationMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateOrganizationMembershipResponse =
            new operations.UpdateOrganizationMembershipResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }
}
