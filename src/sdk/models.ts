/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Models {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create a model with a given name and a time period
     *
     * @remarks
     * Create a model
     */
    async createModel(
        req: operations.CreateModelRequest,
        security: operations.CreateModelSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateModelResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateModelRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}/models", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateModelSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateModelResponse = new operations.CreateModelResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.modelMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ModelMetadataResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Mark a model as inactive
     *
     * @remarks
     * Mark a model as inactive
     */
    async deactivateModel(
        req: operations.DeactivateModelRequest,
        security: operations.DeactivateModelSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeactivateModelResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeactivateModelRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{model_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeactivateModelSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeactivateModelResponse = new operations.DeactivateModelResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.modelMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ModelMetadataResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete the entity schema config for a given dataset.
     *
     * @remarks
     * Delete the entity schema config for a given dataset.
     */
    async deleteEntitySchema(
        req: operations.DeleteEntitySchemaRequest,
        security: operations.DeleteEntitySchemaSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteEntitySchemaResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEntitySchemaRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteEntitySchemaSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteEntitySchemaResponse =
            new operations.DeleteEntitySchemaResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Delete the entity schema of a single column for a given dataset.
     *
     * @remarks
     * Delete the entity schema of a single column for a given dataset.
     */
    async deleteEntitySchemaColumn(
        req: operations.DeleteEntitySchemaColumnRequest,
        security: operations.DeleteEntitySchemaColumnSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteEntitySchemaColumnResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEntitySchemaColumnRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema/column/{column_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteEntitySchemaColumnSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteEntitySchemaColumnResponse =
            new operations.DeleteEntitySchemaColumnResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Delete the schema of a single metric for a given dataset.
     *
     * @remarks
     * Delete the schema of a single metric for a given dataset.
     */
    async deleteEntitySchemaMetric(
        req: operations.DeleteEntitySchemaMetricRequest,
        security: operations.DeleteEntitySchemaMetricSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteEntitySchemaMetricResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteEntitySchemaMetricRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema/metric/{metric_label}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteEntitySchemaMetricSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteEntitySchemaMetricResponse =
            new operations.DeleteEntitySchemaMetricResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Get the entity schema config for a given dataset.
     *
     * @remarks
     * Get the entity schema config for a given dataset.
     */
    async getEntitySchema(
        req: operations.GetEntitySchemaRequest,
        security: operations.GetEntitySchemaSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetEntitySchemaResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetEntitySchemaRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetEntitySchemaSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetEntitySchemaResponse = new operations.GetEntitySchemaResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.entitySchema = utils.objectToClass(httpRes?.data, shared.EntitySchema);
                }
                break;
        }

        return res;
    }

    /**
     * Get the entity schema of a single column for a given dataset.
     *
     * @remarks
     * Get the entity schema of a single column for a given dataset.
     */
    async getEntitySchemaColumn(
        req: operations.GetEntitySchemaColumnRequest,
        security: operations.GetEntitySchemaColumnSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetEntitySchemaColumnResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetEntitySchemaColumnRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema/column/{column_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetEntitySchemaColumnSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetEntitySchemaColumnResponse =
            new operations.GetEntitySchemaColumnResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.columnSchema = utils.objectToClass(httpRes?.data, shared.ColumnSchema);
                }
                break;
        }

        return res;
    }

    /**
     * Get a model metadata
     *
     * @remarks
     * Returns various metadata about a model
     */
    async getModel(
        req: operations.GetModelRequest,
        security: operations.GetModelSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetModelResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetModelRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{model_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetModelSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetModelResponse = new operations.GetModelResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.modelMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ModelMetadataResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get a list of all of the model ids for an organization.
     *
     * @remarks
     * Get a list of all of the model ids for an organization.
     */
    async listModels(
        req: operations.ListModelsRequest,
        security: operations.ListModelsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListModelsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListModelsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}/models", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListModelsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListModelsResponse = new operations.ListModelsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listModelsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ListModelsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Save the entity schema config for a given dataset.
     *
     * @remarks
     * Save the entity schema config for a given dataset.
     */
    async putEntitySchema(
        req: operations.PutEntitySchemaRequest,
        security: operations.PutEntitySchemaSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutEntitySchemaResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutEntitySchemaRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "entitySchema", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutEntitySchemaSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutEntitySchemaResponse = new operations.PutEntitySchemaResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Save the entity schema of a single column for a given dataset.
     *
     * @remarks
     * Save the entity schema of a single column for a given dataset.
     */
    async putEntitySchemaColumn(
        req: operations.PutEntitySchemaColumnRequest,
        security: operations.PutEntitySchemaColumnSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutEntitySchemaColumnResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutEntitySchemaColumnRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema/column/{column_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "columnSchema", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutEntitySchemaColumnSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutEntitySchemaColumnResponse =
            new operations.PutEntitySchemaColumnResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Save the schema of a single metric for a given dataset.
     *
     * @remarks
     * Save the schema of a single metric for a given dataset.
     */
    async putEntitySchemaMetric(
        req: operations.PutEntitySchemaMetricRequest,
        security: operations.PutEntitySchemaMetricSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutEntitySchemaMetricResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutEntitySchemaMetricRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/schema/metric",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "metricSchema", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutEntitySchemaMetricSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutEntitySchemaMetricResponse =
            new operations.PutEntitySchemaMetricResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Update a model's metadata
     *
     * @remarks
     * Update a model's metadata
     */
    async updateModel(
        req: operations.UpdateModelRequest,
        security: operations.UpdateModelSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateModelResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateModelRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{model_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateModelSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateModelResponse = new operations.UpdateModelResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.modelMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ModelMetadataResponse
                    );
                }
                break;
        }

        return res;
    }
}
