/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DatasetProfile {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Returns data needed to uploading the reference profile
     *
     * @remarks
     * Returns data needed to upload the reference profile. Supports uploading segmented reference profiles.
     *             If segments are omitted, provides data needed to upload a single reference profile.
     *             This replaces the deprecated LogReference operation.
     *
     */
    async createReferenceProfile(
        req: operations.CreateReferenceProfileRequest,
        security: operations.CreateReferenceProfileSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateReferenceProfileResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateReferenceProfileRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/reference-profile",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "createReferenceProfileRequest",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateReferenceProfileSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateReferenceProfileResponse =
            new operations.CreateReferenceProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.createReferenceProfileResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.CreateReferenceProfileResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Deletes a set of analyzer results
     *
     * @remarks
     * Deletes a set of analyzer results. Returns false if scheduling deletion encountered some error.
     *
     *
     */
    async deleteAnalyzerResults(
        req: operations.DeleteAnalyzerResultsRequest,
        security: operations.DeleteAnalyzerResultsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteAnalyzerResultsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteAnalyzerResultsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}/analyzer-results",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteAnalyzerResultsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteAnalyzerResultsResponse =
            new operations.DeleteAnalyzerResultsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deleteAnalyzerResultsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.DeleteAnalyzerResultsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Deletes a set of dataset profiles
     *
     * @remarks
     * Deletes a set of dataset profiles. Returns false if scheduling deletion encountered some error.
     *
     *
     */
    async deleteDatasetProfiles(
        req: operations.DeleteDatasetProfilesRequest,
        security: operations.DeleteDatasetProfilesSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteDatasetProfilesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteDatasetProfilesRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{dataset_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteDatasetProfilesSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteDatasetProfilesResponse =
            new operations.DeleteDatasetProfilesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deleteDatasetProfilesResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.DeleteDatasetProfilesResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Delete a single reference profile
     *
     * @remarks
     * Delete a a Reference Profile. Returns false if the deletion encountered some error.
     *
     *
     */
    async deleteReferenceProfile(
        req: operations.DeleteReferenceProfileRequest,
        security: operations.DeleteReferenceProfileSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteReferenceProfileResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteReferenceProfileRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteReferenceProfileSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteReferenceProfileResponse =
            new operations.DeleteReferenceProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deleteReferenceProfileDefaultApplicationJSONBoolean = httpRes?.data;
                }
                break;
        }

        return res;
    }

    /**
     * Returns a single reference profile
     *
     * @remarks
     * Returns a Reference Profile.
     *
     *
     */
    async getReferenceProfile(
        req: operations.GetReferenceProfileRequest,
        security: operations.GetReferenceProfileSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetReferenceProfileResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetReferenceProfileRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles/{reference_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetReferenceProfileSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetReferenceProfileResponse =
            new operations.GetReferenceProfileResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.referenceProfileItemResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ReferenceProfileItemResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Returns a list for reference profiles
     *
     * @remarks
     * Returns a list of Reference Profiles.
     *
     *
     */
    async listReferenceProfiles(
        req: operations.ListReferenceProfilesRequest,
        security: operations.ListReferenceProfilesSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListReferenceProfilesResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListReferenceProfilesRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/reference-profiles",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListReferenceProfilesSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListReferenceProfilesResponse =
            new operations.ListReferenceProfilesResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.referenceProfileItemResponses = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.referenceProfileItemResponses = utils.objectToClass(
                        httpRes?.data,
                        shared.ReferenceProfileItemResponse,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Returns a list of segments
     *
     * @remarks
     * Returns a list of segments for the dataset.
     *
     *
     */
    async listSegments(
        req: operations.ListSegmentsRequest,
        security: operations.ListSegmentsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListSegmentsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSegmentsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/segments",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListSegmentsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListSegmentsResponse = new operations.ListSegmentsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.segmentListResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.SegmentListResponse
                    );
                }
                break;
        }

        return res;
    }
}
