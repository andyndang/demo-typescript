/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Internal {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     *
     * @remarks
     * Create a membership for a user, making them apart of an organization. Uses the user's current email address.
     */
    async createMembership(
        req: shared.AddMembershipRequest,
        security: operations.CreateMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.AddMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateMembershipResponse = new operations.CreateMembershipResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create an organization
     *
     * @remarks
     * Create an organization
     */
    async createOrganization(
        req: operations.CreateOrganizationRequest,
        security: operations.CreateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.CreateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateOrganizationResponse =
            new operations.CreateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create a user.
     *
     * @remarks
     * Create a user.
     */
    async createUser(
        req: shared.CreateUserRequest,
        security: operations.CreateUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.CreateUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.CreateUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateUserResponse = new operations.CreateUserResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.user = utils.objectToClass(httpRes?.data, shared.User);
                }
                break;
        }

        return res;
    }

    /**
     * Delete an org
     *
     * @remarks
     * Delete an org
     */
    async deleteOrganization(
        req: operations.DeleteOrganizationRequest,
        security: operations.DeleteOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteOrganizationResponse =
            new operations.DeleteOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Get marketplace metadata for an org if any exists.
     *
     * @remarks
     * Get marketplace metadata for an org if any exists.
     */
    async getAWSMarketplaceMetadata(
        req: operations.GetAWSMarketplaceMetadataRequest,
        security: operations.GetAWSMarketplaceMetadataSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetAWSMarketplaceMetadataResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetAWSMarketplaceMetadataRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/marketplace-metadata/",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetAWSMarketplaceMetadataSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetAWSMarketplaceMetadataResponse =
            new operations.GetAWSMarketplaceMetadataResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMarketplaceMetadataResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMarketplaceMetadataResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get an api key by its id
     *
     * @remarks
     * Get an api key by its id
     */
    async getApiKey(
        req: operations.GetApiKeyRequest,
        security: operations.GetApiKeySecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetApiKeyResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetApiKeyRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/api-key/{key_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetApiKeySecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetApiKeyResponse = new operations.GetApiKeyResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.userApiKeyResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.UserApiKeyResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the connection metadata for a given org
     *
     * @remarks
     * Get the connection metadata for a given org
     */
    async getConnection(
        req: shared.GetConnectionRequest,
        security: operations.GetConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.GetConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/databricks/get-connection";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetConnectionResponse = new operations.GetConnectionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getConnectionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetConnectionResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the default membership for a user.
     *
     * @remarks
     * Get the default membership for a user.
     */
    async getDefaultMembershipForEmail(
        req: operations.GetDefaultMembershipForEmailRequest,
        security: operations.GetDefaultMembershipForEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetDefaultMembershipForEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetDefaultMembershipForEmailRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/default";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetDefaultMembershipForEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetDefaultMembershipForEmailResponse =
            new operations.GetDefaultMembershipForEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getDefaultMembershipResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetDefaultMembershipResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get feature flags for the specified user/org
     *
     * @remarks
     * Get feature flags for the specified user/org
     */
    async getFeatureFlags(
        req: operations.GetFeatureFlagsRequest,
        security: operations.GetFeatureFlagsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetFeatureFlagsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetFeatureFlagsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/feature-flags";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetFeatureFlagsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetFeatureFlagsResponse = new operations.GetFeatureFlagsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.featureFlags = utils.objectToClass(httpRes?.data, shared.FeatureFlags);
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for a user.
     *
     * @remarks
     * Get memberships for a user.
     */
    async getMemberships(
        req: operations.GetMembershipsRequest,
        security: operations.GetMembershipsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/membership/user/{user_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsResponse = new operations.GetMembershipsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for a user given that user's email address.
     *
     * @remarks
     * Get memberships for a user given that user's email address.
     */
    async getMembershipsByEmail(
        req: operations.GetMembershipsByEmailRequest,
        security: operations.GetMembershipsByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsByEmailRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/user";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsByEmailResponse =
            new operations.GetMembershipsByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get memberships for an org.
     *
     * @remarks
     * Get memberships for an org.
     */
    async getMembershipsByOrg(
        req: operations.GetMembershipsByOrgRequest,
        security: operations.GetMembershipsByOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMembershipsByOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMembershipsByOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/membership/org/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMembershipsByOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMembershipsByOrgResponse =
            new operations.GetMembershipsByOrgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMembershipsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetMembershipsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the monitor config document version for a given dataset.
     *
     * @remarks
     * Get the monitor config document version for a given dataset.
     */
    async getMonitorConfigV3Version(
        req: operations.GetMonitorConfigV3VersionRequest,
        security: operations.GetMonitorConfigV3VersionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetMonitorConfigV3VersionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetMonitorConfigV3VersionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3/versions/{version_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetMonitorConfigV3VersionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetMonitorConfigV3VersionResponse =
            new operations.GetMonitorConfigV3VersionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getMonitorConfigV3VersionDefaultApplicationJSONString = JSON.stringify(
                        httpRes?.data
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get notification settings for an org
     *
     * @remarks
     * Get notification settings for an org
     */
    async getNotificationSettings(
        req: operations.GetNotificationSettingsRequest,
        security: operations.GetNotificationSettingsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetNotificationSettingsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetNotificationSettingsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/notification-settings/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetNotificationSettingsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetNotificationSettingsResponse =
            new operations.GetNotificationSettingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getNotificationSettingsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetNotificationSettingsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get the metadata about an organization.
     *
     * @remarks
     * Returns various metadata about an organization
     */
    async getOrganization(
        req: operations.GetOrganizationRequest,
        security: operations.GetOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetOrganizationResponse = new operations.GetOrganizationResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get a user by their id.
     *
     * @remarks
     * Get a user by their id.
     */
    async getUser(
        req: operations.GetUserRequest,
        security: operations.GetUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/user/{user_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetUserResponse = new operations.GetUserResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.user = utils.objectToClass(httpRes?.data, shared.User);
                }
                break;
        }

        return res;
    }

    /**
     * Get a user by their email.
     *
     * @remarks
     * Get a user by their email.
     */
    async getUserByEmail(
        req: operations.GetUserByEmailRequest,
        security: operations.GetUserByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetUserByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetUserByEmailRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/user";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetUserByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetUserByEmailResponse = new operations.GetUserByEmailResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.user = utils.objectToClass(httpRes?.data, shared.User);
                }
                break;
        }

        return res;
    }

    /**
     * List API key metadata for a given organization and user
     *
     * @remarks
     * Returns the API key metadata for a given organization and user
     */
    async listApiKeys(
        req: operations.ListApiKeysRequest,
        security: operations.ListApiKeysSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListApiKeysResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListApiKeysRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}/api-key", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListApiKeysSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListApiKeysResponse = new operations.ListApiKeysResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listUserApiKeys = utils.objectToClass(
                        httpRes?.data,
                        shared.ListUserApiKeys
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List all of the jobs in a workspace.
     *
     * @remarks
     * List all of the jobs in a workspace.
     */
    async listJobs(
        req: shared.ListJobsRequest,
        security: operations.ListJobsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListJobsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ListJobsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/databricks/list-jobs";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListJobsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListJobsResponse = new operations.ListJobsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listJobsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ListJobsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List the monitor config document versions for a given dataset.
     *
     * @remarks
     * List the monitor config document versions for a given dataset.
     */
    async listMonitorConfigV3Versions(
        req: operations.ListMonitorConfigV3VersionsRequest,
        security: operations.ListMonitorConfigV3VersionsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListMonitorConfigV3VersionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListMonitorConfigV3VersionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/monitor-config/v3/versions",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListMonitorConfigV3VersionsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListMonitorConfigV3VersionsResponse =
            new operations.ListMonitorConfigV3VersionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.monitorConfigVersions = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.monitorConfigVersions = utils.objectToClass(
                        httpRes?.data,
                        shared.MonitorConfigVersion,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get a list of all of the organization ids.
     *
     * @remarks
     * Get a list of all of the organization ids.
     */
    async listOrganizations(
        security: operations.ListOrganizationsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListOrganizationsResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListOrganizationsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListOrganizationsResponse = new operations.ListOrganizationsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.listOrganizationsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ListOrganizationsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Returns a list of segments
     *
     * @remarks
     * Returns a list of segments for the dataset.
     *
     *
     */
    async listSegments(
        req: operations.ListSegmentsRequest,
        security: operations.ListSegmentsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListSegmentsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListSegmentsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/dataset-profiles/models/{model_id}/segments",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListSegmentsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListSegmentsResponse = new operations.ListSegmentsResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.segmentListResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.SegmentListResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update some fields of an organization to non-null values
     *
     * @remarks
     * Update some fields of an organization to non-null values, leaving all other existing values the same
     *
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async partiallyUpdateOrg(
        req: operations.PartiallyUpdateOrgRequest,
        security: operations.PartiallyUpdateOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PartiallyUpdateOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PartiallyUpdateOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations/partial/";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PartiallyUpdateOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PartiallyUpdateOrgResponse =
            new operations.PartiallyUpdateOrgResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update some fields of an organization to non-null values
     *
     * @remarks
     * Update some fields of an organization to non-null values, leaving all other existing values the same
     */
    async partiallyUpdateOrganization(
        req: operations.PartiallyUpdateOrganizationRequest,
        security: operations.PartiallyUpdateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PartiallyUpdateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PartiallyUpdateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/partial/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PartiallyUpdateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PartiallyUpdateOrganizationResponse =
            new operations.PartiallyUpdateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create a monitor config validation job for all configs
     *
     * @remarks
     * Create a monitor config validation job for all configs
     */
    async postMonitorConfigValidationJob(
        security: operations.PostMonitorConfigValidationJobSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PostMonitorConfigValidationJobResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string =
            baseURL.replace(/\/$/, "") + "/v0/admin/monitor-config/create-validation-job";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PostMonitorConfigValidationJobSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PostMonitorConfigValidationJobResponse =
            new operations.PostMonitorConfigValidationJobResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Create resources for a new user coming from AWS Marketplace
     *
     * @remarks
     * Create resources for a new user coming from AWS Marketplace
     */
    async provisionAWSMarketplaceNewUser(
        req: shared.ProvisionNewMarketplaceUserRequest,
        security: operations.ProvisionAWSMarketplaceNewUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionAWSMarketplaceNewUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionNewMarketplaceUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/marketplace/aws/new-user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionAWSMarketplaceNewUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionAWSMarketplaceNewUserResponse =
            new operations.ProvisionAWSMarketplaceNewUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionNewAWSMarketplaceUserResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionNewAWSMarketplaceUserResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create resources for a new user coming from Databricks
     *
     * @remarks
     * Create resources for a new user coming from Databricks
     */
    async provisionDatabricksConnection(
        req: shared.ProvisionDatabricksConnectionRequest,
        security: operations.ProvisionDatabricksConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionDatabricksConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionDatabricksConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/connect/databricks";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionDatabricksConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionDatabricksConnectionResponse =
            new operations.ProvisionDatabricksConnectionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionDatabricksConnectionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionDatabricksConnectionResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create the resources that a new user needs to use WhyLabs via the website.
     *
     * @remarks
     * Create the resources that a new user needs to use WhyLabs via the website.
     */
    async provisionNewUser(
        req: shared.ProvisionNewUserRequest,
        security: operations.ProvisionNewUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionNewUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionNewUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/new-user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionNewUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionNewUserResponse = new operations.ProvisionNewUserResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionNewUserResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionNewUserResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Put the RequestMonitorRun config into S3.
     *
     * @remarks
     * Put the RequestMonitorRun config into S3.
     */
    async putRequestMonitorRunConfig(
        req: operations.PutRequestMonitorRunConfigRequest,
        security: operations.PutRequestMonitorRunConfigSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutRequestMonitorRunConfigResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutRequestMonitorRunConfigRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/organizations/{org_id}/models/{dataset_id}/request-monitor-run",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutRequestMonitorRunConfigSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutRequestMonitorRunConfigResponse =
            new operations.PutRequestMonitorRunConfigResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.putRequestMonitorRunConfigDefaultApplicationJSONString = JSON.stringify(
                        httpRes?.data
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Refresh metadata for a workspace connection.
     *
     * @remarks
     * Refresh metadata for a workspace connection.
     */
    async refreshConnection(
        req: shared.RefreshConnectionRequest,
        security: operations.RefreshConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RefreshConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RefreshConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/databricks/refresh-connection";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RefreshConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RefreshConnectionResponse = new operations.RefreshConnectionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.refreshConnectionByOrgIdResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.RefreshConnectionByOrgIdResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Register databricks metadata, temporarily storing it against a UUID so that it can be used to provision a databricks connection after email authentication
     *
     * @remarks
     * Register databricks metadata, temporarily storing it against a UUID so that it can be used to provision a databricks connection after email authentication
     */
    async registerDatabricksConnection(
        req: shared.RegisterDatabricksConnectionRequest,
        security: operations.RegisterDatabricksConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RegisterDatabricksConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RegisterDatabricksConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/connect/databricks/staged";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RegisterDatabricksConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RegisterDatabricksConnectionResponse =
            new operations.RegisterDatabricksConnectionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.registerDatabricksConnectionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.RegisterDatabricksConnectionResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Removes membership in a given org from a user, using the user's email address.
     *
     * @remarks
     * Removes membership in a given org from a user, using the user's email address.
     */
    async removeMembershipByEmail(
        req: shared.RemoveMembershipRequest,
        security: operations.RemoveMembershipByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RemoveMembershipByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RemoveMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RemoveMembershipByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RemoveMembershipByEmailResponse =
            new operations.RemoveMembershipByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Run an existing job in a given databricks workspace.
     *
     * @remarks
     * Run an existing job in a given databricks workspace.
     */
    async runJob(
        req: shared.RunJobRequest,
        security: operations.RunJobSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RunJobResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RunJobRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/databricks/run-job";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RunJobSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RunJobResponse = new operations.RunJobResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.runJobResponse = utils.objectToClass(httpRes?.data, shared.RunJobResponse);
                }
                break;
        }

        return res;
    }

    /**
     * Sets the organization that should be used when logging a user in
     *
     * @remarks
     * Sets the organization that should be used when logging a user in
     */
    async setDefaultMembership(
        req: shared.SetDefaultMembershipRequest,
        security: operations.SetDefaultMembershipSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.SetDefaultMembershipResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.SetDefaultMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership/default";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.SetDefaultMembershipSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.SetDefaultMembershipResponse =
            new operations.SetDefaultMembershipResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Endpoint for Stripe payment webhooks
     *
     * @remarks
     * Endpoint for Stripe payment webhooks
     */
    async stripePaymentEndpoint(
        req: string,
        config?: AxiosRequestConfig
    ): Promise<operations.StripePaymentEndpointResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/payment/stripe";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        const client: AxiosInstance = this.sdkConfiguration.defaultClient;

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.StripePaymentEndpointResponse =
            new operations.StripePaymentEndpointResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Update the connection metadata for a given org
     *
     * @remarks
     * Update the connection metadata for a given org
     */
    async updateConnection(
        req: shared.UpdateConnectionRequest,
        security: operations.UpdateConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.UpdateConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/databricks/update-connection";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateConnectionResponse = new operations.UpdateConnectionResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }

    /**
     * Updates the role in an membership
     *
     * @remarks
     * Updates the role in an membership, given the organization and the user's email address.
     */
    async updateMembershipByEmail(
        req: shared.UpdateMembershipRequest,
        security: operations.UpdateMembershipByEmailSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateMembershipByEmailResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.UpdateMembershipRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/membership";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateMembershipByEmailSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateMembershipByEmailResponse =
            new operations.UpdateMembershipByEmailResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.membershipMetadata = utils.objectToClass(
                        httpRes?.data,
                        shared.MembershipMetadata
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update notification settings for an org
     *
     * @remarks
     * Update notification settings for an org
     */
    async updateNotificationSettings(
        req: operations.UpdateNotificationSettingsRequest,
        security: operations.UpdateNotificationSettingsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateNotificationSettingsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateNotificationSettingsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/notification-settings/{org_id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "notificationSettings",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateNotificationSettingsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateNotificationSettingsResponse =
            new operations.UpdateNotificationSettingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.notificationSettings = utils.objectToClass(
                        httpRes?.data,
                        shared.NotificationSettings
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update an existing organization
     *
     * @remarks
     * Update all fields of an existing organization
     *
     * @deprecated this method will be removed in a future release, please migrate away from it as soon as possible
     */
    async updateOrg(
        req: operations.UpdateOrgRequest,
        security: operations.UpdateOrgSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateOrgResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateOrgRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/organizations";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateOrgSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateOrgResponse = new operations.UpdateOrgResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update an existing organization
     *
     * @remarks
     * Update all fields of an existing organization
     */
    async updateOrganization(
        req: operations.UpdateOrganizationRequest,
        security: operations.UpdateOrganizationSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateOrganizationResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateOrganizationRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/organizations/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateOrganizationSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateOrganizationResponse =
            new operations.UpdateOrganizationResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationSummary = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationSummary
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Update a user.
     *
     * @remarks
     * Update a user.
     */
    async updateUser(
        req: shared.User,
        security: operations.UpdateUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.User(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateUserResponse = new operations.UpdateUserResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.user = utils.objectToClass(httpRes?.data, shared.User);
                }
                break;
        }

        return res;
    }

    /**
     * WhyLabs Search
     *
     * @remarks
     * WhyLabs Search
     */
    async whyLabsSearch(
        req: operations.WhyLabsSearchRequest,
        security: operations.WhyLabsSearchSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.WhyLabsSearchResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.WhyLabsSearchRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/search";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.WhyLabsSearchSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.WhyLabsSearchResponse = new operations.WhyLabsSearchResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.searchResponse = utils.objectToClass(httpRes?.data, shared.SearchResponse);
                }
                break;
        }

        return res;
    }

    /**
     * WhyLabs Search Indexing
     *
     * @remarks
     * WhyLabs Search Indexing
     */
    async whyLabsSearchIndexing(
        req: shared.SearchIndexRequest,
        security: operations.WhyLabsSearchIndexingSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.WhyLabsSearchIndexingResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.SearchIndexRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/search/index";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.WhyLabsSearchIndexingSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.WhyLabsSearchIndexingResponse =
            new operations.WhyLabsSearchIndexingResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.response = utils.objectToClass(httpRes?.data, shared.Response);
                }
                break;
        }

        return res;
    }
}
