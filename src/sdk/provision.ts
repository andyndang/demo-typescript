/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Provision {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create resources for a new user coming from AWS Marketplace
     *
     * @remarks
     * Create resources for a new user coming from AWS Marketplace
     */
    async provisionAWSMarketplaceNewUser(
        req: shared.ProvisionNewMarketplaceUserRequest,
        security: operations.ProvisionAWSMarketplaceNewUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionAWSMarketplaceNewUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionNewMarketplaceUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/marketplace/aws/new-user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionAWSMarketplaceNewUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionAWSMarketplaceNewUserResponse =
            new operations.ProvisionAWSMarketplaceNewUserResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionNewAWSMarketplaceUserResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionNewAWSMarketplaceUserResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create resources for a new user coming from Databricks
     *
     * @remarks
     * Create resources for a new user coming from Databricks
     */
    async provisionDatabricksConnection(
        req: shared.ProvisionDatabricksConnectionRequest,
        security: operations.ProvisionDatabricksConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionDatabricksConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionDatabricksConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/connect/databricks";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionDatabricksConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionDatabricksConnectionResponse =
            new operations.ProvisionDatabricksConnectionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionDatabricksConnectionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionDatabricksConnectionResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create the resources that a new user needs to use WhyLabs via the website.
     *
     * @remarks
     * Create the resources that a new user needs to use WhyLabs via the website.
     */
    async provisionNewUser(
        req: shared.ProvisionNewUserRequest,
        security: operations.ProvisionNewUserSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ProvisionNewUserResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.ProvisionNewUserRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/new-user";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ProvisionNewUserSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ProvisionNewUserResponse = new operations.ProvisionNewUserResponse({
            statusCode: httpRes.status,
            contentType: contentType,
            rawResponse: httpRes,
        });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.provisionNewUserResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.ProvisionNewUserResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Register databricks metadata, temporarily storing it against a UUID so that it can be used to provision a databricks connection after email authentication
     *
     * @remarks
     * Register databricks metadata, temporarily storing it against a UUID so that it can be used to provision a databricks connection after email authentication
     */
    async registerDatabricksConnection(
        req: shared.RegisterDatabricksConnectionRequest,
        security: operations.RegisterDatabricksConnectionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.RegisterDatabricksConnectionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new shared.RegisterDatabricksConnectionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/v0/provision/connect/databricks/staged";

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "request", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.RegisterDatabricksConnectionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.RegisterDatabricksConnectionResponse =
            new operations.RegisterDatabricksConnectionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.registerDatabricksConnectionResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.RegisterDatabricksConnectionResponse
                    );
                }
                break;
        }

        return res;
    }
}
