/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class NotificationSettings {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Add new notification action
     *
     * @remarks
     * Add new notification action
     */
    async addNotificationAction(
        req: operations.AddNotificationActionRequest,
        security: operations.AddNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.AddNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.AddNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{type}/{action_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.AddNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.AddNotificationActionResponse =
            new operations.AddNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Delete notification action
     *
     * @remarks
     * Delete notification action
     */
    async deleteNotificationAction(
        req: operations.DeleteNotificationActionRequest,
        security: operations.DeleteNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DeleteNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DeleteNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{action_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DeleteNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "delete",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DeleteNotificationActionResponse =
            new operations.DeleteNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Disable notification action
     *
     * @remarks
     * Disable notification action
     */
    async disableNotificationAction(
        req: operations.DisableNotificationActionRequest,
        security: operations.DisableNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.DisableNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.DisableNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{action_id}/disable",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.DisableNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.DisableNotificationActionResponse =
            new operations.DisableNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Enable notification action
     *
     * @remarks
     * Enable notification action
     */
    async enableNotificationAction(
        req: operations.EnableNotificationActionRequest,
        security: operations.EnableNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.EnableNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.EnableNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{action_id}/enable",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.EnableNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.EnableNotificationActionResponse =
            new operations.EnableNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Get notification action for id
     *
     * @remarks
     * Get notification action for id
     */
    async getNotificationAction(
        req: operations.GetNotificationActionRequest,
        security: operations.GetNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{action_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetNotificationActionResponse =
            new operations.GetNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.notificationAction = utils.objectToClass(
                        httpRes?.data,
                        shared.NotificationAction
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get notification settings for an org
     *
     * @remarks
     * Get notification settings for an org
     */
    async getNotificationSettings(
        req: operations.GetNotificationSettingsRequest,
        security: operations.GetNotificationSettingsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetNotificationSettingsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.GetNotificationSettingsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/notification-settings/{org_id}", req);

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetNotificationSettingsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetNotificationSettingsResponse =
            new operations.GetNotificationSettingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.getNotificationSettingsResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.GetNotificationSettingsResponse
                    );
                }
                break;
        }

        return res;
    }

    /**
     * List notification actions for an org
     *
     * @remarks
     * Get notification actions for an org
     */
    async listNotificationActions(
        req: operations.ListNotificationActionsRequest,
        security: operations.ListNotificationActionsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListNotificationActionsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.ListNotificationActionsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.ListNotificationActionsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListNotificationActionsResponse =
            new operations.ListNotificationActionsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.notificationActions = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.notificationActions = utils.objectToClass(
                        httpRes?.data,
                        shared.NotificationAction,
                        resFieldDepth
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Add new notification action
     *
     * @remarks
     * Add new notification action
     */
    async putNotificationAction(
        req: operations.PutNotificationActionRequest,
        security: operations.PutNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.PutNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.PutNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{type}/{action_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.PutNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.PutNotificationActionResponse =
            new operations.PutNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Test a notification action
     *
     * @remarks
     * Test a notification action
     */
    async testNotificationAction(
        req: operations.TestNotificationActionRequest,
        security: operations.TestNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.TestNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.TestNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{action_id}/test",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.TestNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.TestNotificationActionResponse =
            new operations.TestNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Update notification action
     *
     * @remarks
     * Update notification action
     */
    async updateNotificationAction(
        req: operations.UpdateNotificationActionRequest,
        security: operations.UpdateNotificationActionSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateNotificationActionResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateNotificationActionRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/v0/notification-settings/{org_id}/actions/{type}/{action_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "string");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateNotificationActionSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "patch",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateNotificationActionResponse =
            new operations.UpdateNotificationActionResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.void = utils.objectToClass(httpRes?.data);
                }
                break;
        }

        return res;
    }

    /**
     * Update notification settings for an org
     *
     * @remarks
     * Update notification settings for an org
     */
    async updateNotificationSettings(
        req: operations.UpdateNotificationSettingsRequest,
        security: operations.UpdateNotificationSettingsSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.UpdateNotificationSettingsResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req = new operations.UpdateNotificationSettingsRequest(req);
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(baseURL, "/v0/notification-settings/{org_id}", req);

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "notificationSettings",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.UpdateNotificationSettingsSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.UpdateNotificationSettingsResponse =
            new operations.UpdateNotificationSettingsResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.notificationSettings = utils.objectToClass(
                        httpRes?.data,
                        shared.NotificationSettings
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get dummy notification action payload
     *
     * @remarks
     * Get dummy notification action payload
     */
    async getEmailNotificationActionPayload(
        security: operations.GetEmailNotificationActionPayloadSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetEmailNotificationActionPayloadResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string =
            baseURL.replace(/\/$/, "") + "/v0/notification-settings/actions/email/payload";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetEmailNotificationActionPayloadSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetEmailNotificationActionPayloadResponse =
            new operations.GetEmailNotificationActionPayloadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.emailNotificationAction = utils.objectToClass(
                        httpRes?.data,
                        shared.EmailNotificationAction
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get dummy notification action payload
     *
     * @remarks
     * Get dummy notification action payload
     */
    async getPagerDutyNotificationActionPayload(
        security: operations.GetPagerDutyNotificationActionPayloadSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetPagerDutyNotificationActionPayloadResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string =
            baseURL.replace(/\/$/, "") + "/v0/notification-settings/actions/pagerduty/payload";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetPagerDutyNotificationActionPayloadSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetPagerDutyNotificationActionPayloadResponse =
            new operations.GetPagerDutyNotificationActionPayloadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.pagerDutyNotificationAction = utils.objectToClass(
                        httpRes?.data,
                        shared.PagerDutyNotificationAction
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get dummy notification action payload
     *
     * @remarks
     * Get dummy notification action payload
     */
    async getSlackNotificationActionPayload(
        security: operations.GetSlackNotificationActionPayloadSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSlackNotificationActionPayloadResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string =
            baseURL.replace(/\/$/, "") + "/v0/notification-settings/actions/slack/payload";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetSlackNotificationActionPayloadSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSlackNotificationActionPayloadResponse =
            new operations.GetSlackNotificationActionPayloadResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            default:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.slackNotificationAction = utils.objectToClass(
                        httpRes?.data,
                        shared.SlackNotificationAction
                    );
                }
                break;
        }

        return res;
    }
}
